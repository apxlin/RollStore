# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backupService_pb2 as backupService__pb2


class BackupNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertBlock = channel.unary_unary(
                '/backupService.BackupNode/InsertBlock',
                request_serializer=backupService__pb2.OpBatch.SerializeToString,
                response_deserializer=backupService__pb2.OpIndex.FromString,
                )
        self.Insertlog = channel.unary_unary(
                '/backupService.BackupNode/Insertlog',
                request_serializer=backupService__pb2.ValidIndex.SerializeToString,
                response_deserializer=backupService__pb2.VdIndex.FromString,
                )
        self.Search = channel.unary_unary(
                '/backupService.BackupNode/Search',
                request_serializer=backupService__pb2.searchKey.SerializeToString,
                response_deserializer=backupService__pb2.searchResult.FromString,
                )


class BackupNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insertlog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackupNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertBlock,
                    request_deserializer=backupService__pb2.OpBatch.FromString,
                    response_serializer=backupService__pb2.OpIndex.SerializeToString,
            ),
            'Insertlog': grpc.unary_unary_rpc_method_handler(
                    servicer.Insertlog,
                    request_deserializer=backupService__pb2.ValidIndex.FromString,
                    response_serializer=backupService__pb2.VdIndex.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=backupService__pb2.searchKey.FromString,
                    response_serializer=backupService__pb2.searchResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'backupService.BackupNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackupNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupService.BackupNode/InsertBlock',
            backupService__pb2.OpBatch.SerializeToString,
            backupService__pb2.OpIndex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insertlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupService.BackupNode/Insertlog',
            backupService__pb2.ValidIndex.SerializeToString,
            backupService__pb2.VdIndex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupService.BackupNode/Search',
            backupService__pb2.searchKey.SerializeToString,
            backupService__pb2.searchResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
